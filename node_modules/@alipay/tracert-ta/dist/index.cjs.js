'use strict';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(source, true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(source).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _toArray(arr) {
  return _arrayWithHoles(arr) || _iterableToArray(arr) || _nonIterableRest();
}

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance");
}

function emptyCb() {}

function respHandler(result, cb, isStr) {
  var callback = typeof cb === 'function' ? cb : emptyCb;

  if (result && result.status === 'success') {
    if (result.data) {
      if (isStr) {
        callback(result.data);
      } else {
        try {
          var data = JSON.parse(result.data);
          callback(data);
        } catch (e) {
          callback({
            err: '解析失败',
            response: result.data
          });
        }
      }
    } else callback({
      err: '容器返回空'
    });
  } else callback({
    err: '容器异常'
  });
}

var Ta =
/*#__PURE__*/
function () {
  function Ta() {
    var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Ta);

    var props = {
      spmAPos: '',
      spmBPos: '',
      callBridge: function callBridge() {
        var _my;

        (_my = my).call.apply(_my, arguments);
      },
      // 调用jsbridge的方法
      bizType: 'common',
      // 业务类型
      logLevel: 2,
      // 默认是2
      chInfo: '',
      // 渠道
      scm: '',
      // 投放信息
      url: '',
      // url
      mdata: {// 通用的数据，可不传，传了所有的埋点均会带该额外参数
      },
      ready: false,
      debug: false,
      apiCashList: [],
      // 未准备好时候的缓存数组
      trace: false,
      // 是否开启全引导
      isTraced: false // 是否执行过全引导参数透传

    };

    if (!opt.spmAPos && !opt.spmBPos) {
      throw new Error('实例化Tracert失败，SPM缺失');
    }

    Object.assign(this, props, opt);
    this.init();
  }

  _createClass(Ta, [{
    key: "getValueOfUrl",
    value: function getValueOfUrl(name, url) {
      var result = '';

      try {
        var pattern = new RegExp("(?=\\?|\\&|\\b|^)".concat(name, "\\=(.+?)(?=\\&|$)"));
        result = pattern.exec(url);
        result = result ? "".concat(result[1]) : '';
        result = decodeURIComponent(result);
      } catch (e) {
        if (console) {
          console.warn('解析启动参数中的URL失败');
        }
      }

      return result;
    }
    /**
     * 初始化
     */

  }, {
    key: "init",
    value: function init() {
      var _this = this;

      var apiCashList = this.apiCashList,
          originChinfo = this.chInfo,
          getValueOfUrl = this.getValueOfUrl; // 获取启动参数

      this.callBridge('getStartupParams', function (result) {
        // 获取需要的启动参数
        var chInfo = result.chInfo || result.chinfo || getValueOfUrl('chInfo', result.url) || getValueOfUrl('chinfo', result.url) || '';
        var scm = result.scm || getValueOfUrl('scm', result.url) || '';
        var trace = !!(result.trace || getValueOfUrl('trace', result.url) || ''); // 存储需要的参数, 同时将Tracert置为可以运行的状态

        _this.set({
          chInfo: originChinfo || chInfo,
          // 若手动设置则优先使用
          scm: scm,
          trace: trace,
          ready: true
        }); // 执行缓存的方法


        for (var i = 0; i < apiCashList.length; i++) {
          var _slice$call = [].slice.call(apiCashList[i]),
              _slice$call2 = _toArray(_slice$call),
              fn = _slice$call2[0],
              args = _slice$call2.slice(1);

          _this.call.apply(_this, [fn].concat(_toConsumableArray(args)));
        }
      });
    }
    /**
     * 获取Tracert的属性或者方法
     * @param {String} key
     */

  }, {
    key: "get",
    value: function get(key) {
      return this[key];
    }
    /**
     * 配置Tracert的属性或者方法
     * @param {Object} options
     */

  }, {
    key: "set",
    value: function set() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var options = opt; // mdata 为特殊参数 制作合并不做替换

      if (_typeof(options.mdata) === 'object') {
        options.mdata = _objectSpread2({}, this.mdata, {}, options.mdata);
      }

      Object.assign(this, opt);
    }
    /**
     * 配置Tracert的属性并开始运行
     * @param {Object} options
     */

  }, {
    key: "start",
    value: function start() {
      var opt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      this.set(opt); // 判断logpv

      if (this.autoLogPv) {
        this.call('logPv');
      }
    }
    /**
     * 最终的发送方法
     * @param {String} fn 方法名称
     * @param {Function} callback 方法入参, 这里写成方法是为了获取到的参数永远是最新的
     */

  }, {
    key: "send",
    value: function send(fn, callback) {
      var debug = this.debug;
      var options = callback.call(this);

      if (debug && console) {
        console.log(fn, options);
      }

      this.callBridge(fn, options); // 若为页面埋点，初始化全引导

      if (fn === 'reportData') {
        this.call('checkFullLinkParams');
      }
    }
    /**
     * 通用唤起方法, 可以唤起Tracert所有方法，用于管理生命周期
     */

  }, {
    key: "call",
    value: function call() {
      var args = [].slice.call(arguments);
      var result;

      if (this.ready) {
        if (!this[args[0]] || typeof this[args[0]] !== 'function') {
          console.warn("\u672A\u627E\u5230\u65B9\u6CD5\uFF1A".concat(args[0]));
          return null;
        }

        var options = args.slice(1);
        result = this[args[0]].apply(this, options);
      } else {
        // 页面没加载完成，缓存
        this.apiCashList.push(args);
      }

      return result;
    }
    /**
     * 发送页面埋点
     * @param {Object} options
     */

  }, {
    key: "logPv",
    value: function logPv() {
      var _this2 = this;

      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      // 3. 发送埋点
      this.call('send', 'reportData', function () {
        // 获取需要的属性
        var spmAPos = _this2.spmAPos,
            spmBPos = _this2.spmBPos,
            bizType = _this2.bizType,
            url = _this2.url,
            mdata = _this2.mdata,
            chInfo = _this2.chInfo; // 0. 判断是否首次调用，需要重置pageMonitor生命周期
        // 2. 拼装参数

        var obj = {
          spm: {
            url: url,
            bizType: bizType,
            isSPM: true,
            spmId: "".concat(spmAPos, ".").concat(spmBPos)
          },
          spmDetail: _objectSpread2({
            chInfo: chInfo
          }, mdata, {}, options)
        };
        return obj;
      });
    } // 补全spmId，比如 c.d 补全为a.b.c.d

  }, {
    key: "_fillspm",
    value: function _fillspm() {
      var spmId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var spmArr = spmId.split('.');

      if (spmArr.length > 2) {
        return spmId;
      }

      return "".concat(this.spmAPos, ".").concat(this.spmBPos, ".").concat(spmId);
    }
    /**
     * 发送点击埋点
     * @param {String} spmId
     * @param {Object} options
     * @param {Object} extraParams 扩展属性5
     */

  }, {
    key: "click",
    value: function click(spmId) {
      var _this3 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var extraParams = arguments.length > 2 ? arguments[2] : undefined;
      this.call('send', 'remoteLog', function () {
        var chInfo = _this3.chInfo,
            bizType = _this3.bizType,
            logLevel = _this3.logLevel,
            url = _this3.url,
            mdata = _this3.mdata;
        var obj = {
          type: 'monitor',
          bizType: bizType,
          logLevel: logLevel,
          param1: url,
          param4: _objectSpread2({
            chInfo: chInfo
          }, mdata, {}, options),
          actionId: 'clicked',
          spmId: _this3._fillspm(spmId)
        };

        if (extraParams && _typeof(extraParams) === 'object' && extraParams.param5) {
          obj.param5 = extraParams.param5;
        }

        return obj;
      });
    }
    /**
     * 发送曝光埋点
     * @param {String} spmId
     * @param {Object} options
     * @param {Object} extraParams 扩展属性5
     */

  }, {
    key: "expo",
    value: function expo(spmId) {
      var _this4 = this;

      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var extraParams = arguments.length > 2 ? arguments[2] : undefined;
      this.call('send', 'remoteLog', function () {
        var chInfo = _this4.chInfo,
            bizType = _this4.bizType,
            logLevel = _this4.logLevel,
            url = _this4.url,
            mdata = _this4.mdata;
        var obj = {
          type: 'monitor',
          bizType: bizType,
          logLevel: logLevel,
          param1: url,
          param4: _objectSpread2({
            chInfo: chInfo
          }, mdata, {}, options),
          actionId: 'exposure',
          spmId: _this4._fillspm(spmId)
        };

        if (extraParams && _typeof(extraParams) === 'object' && extraParams.param5) {
          obj.param5 = extraParams.param5;
        }

        return obj;
      });
    }
    /**
     * 全引导初始化
     */

  }, {
    key: "checkFullLinkParams",
    value: function checkFullLinkParams() {
      var _this5 = this;

      var trace = this.trace,
          isTraced = this.isTraced,
          chinfo = this.chInfo,
          scm = this.scm;

      if (trace && !isTraced) {
        this.callBridge('handleLoggingAction', {
          actionType: 'setPageParams',
          data: JSON.stringify({
            chinfo: chinfo,
            scm: scm
          })
        }, function () {
          _this5.set({
            isTraced: true
          });
        });
      }
    }
    /**
     * 内容曝光接口
     * @param {String} spmId spmId
     * @param {String} scm   scm内容参数
     * @param {Object} newChinfo 流量位标识
     * @param {Object} params 系统参数（扩展4）
     */

  }, {
    key: "expoContent",
    value: function expoContent() {
      var spmId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var scm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var newChinfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      this.expo(spmId, params, {
        param5: "newChinfo=".concat(newChinfo, "^scm=").concat(scm)
      });
    }
    /**
     * 内容点击接口
     * @param {String} spmId spmId
     * @param {String} scm   scm内容参数
     * @param {Object} newChinfo 流量位标识
     * @param {Object} params 系统参数（扩展4）
     */

  }, {
    key: "clickContent",
    value: function clickContent() {
      var spmId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var scm = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
      var newChinfo = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
      var params = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
      this.click(spmId, params, {
        param5: "newChinfo=".concat(newChinfo, "^scm=").concat(scm)
      });
    }
    /**
     * 全引导能力，设置当前页面的透传参数
     * @param {*} params 透传参数
     * @param {*} scm 内容参数（兼容老接口）
     */

  }, {
    key: "setPageParams",
    value: function setPageParams(params, scm) {
      this._setParams('setPageParams', params, scm);
    }
    /**
     * 全引导能力，设置下一个页面的透传参数
     * @param {*} params 透传参数
     */

  }, {
    key: "setNextPageParams",
    value: function setNextPageParams(params) {
      this._setParams('setNextPageParams', params);
    }
    /**
     * 全渠道能力，缓存当前渠道信息
     * @param {*} params
     */

  }, {
    key: "appendChinfo",
    value: function appendChinfo() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._setChinfoChain('appendChinfo', params);
    }
    /**
     * 全渠道能力，更新当前渠道信息
     * @param {*} params
     */

  }, {
    key: "updateChinfo",
    value: function updateChinfo() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._setChinfoChain('updateChinfo', params);
    }
    /**
     * 获取渠道信息
     * @param {*} cb 回调
     * @param {*} options boolean 老接口，代表是否去重
     *                    object  新接口，配置项：isFiltered: boolean，是否去重
     *                                         isFirst: boolean, 是否只取第一个
     */

  }, {
    key: "getChinfoChain",
    value: function getChinfoChain(cb) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var actionType = 'getChinfoChain';
      var params = {};

      if (typeof options === 'boolean' && options) {
        params.isFiltered = '1';
      }

      if (_typeof(options) === 'object') {
        if (options.isFirst) actionType = 'getFirstChinfo';else if (options.isFiltered) params.isFiltered = '1';
      }

      this.callBridge('handleLoggingAction', _objectSpread2({
        actionType: actionType
      }, params), function (result) {
        respHandler(result, cb);
      });
    }
    /**
     * 获取渠道链UUID，并生成一条事件埋点上报渠道
     * @param {*} cb 回调
     * @param {*} options object 新接口，配置项：isFiltered: boolean，是否去重
     */

  }, {
    key: "getChinfoChainUUID",
    value: function getChinfoChainUUID(cb) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var params = {
        actionType: 'getChinfoChainUUID'
      };
      if (options.isFiltered) params.isFiltered = '1';
      if (options.bizName) params.bizName = options.bizName;
      this.callBridge('handleLoggingAction', params, function (result) {
        respHandler(result, cb, true);
      });
    }
    /**
     * 获取当前页面的全引导参数（newChinfo + scm）
     * @param {*} cb 回调
     */

  }, {
    key: "getCurrentPageParams",
    value: function getCurrentPageParams(cb) {
      this.callBridge('handleLoggingAction', {
        actionType: 'getCurrentPageParams'
      }, function (result) {
        respHandler(result, cb);
      });
    }
    /**
     * 设置当前页面的渠道
     * @param {*} params newChinfo + scm
     */

  }, {
    key: "setCurrentPageNewChinfo",
    value: function setCurrentPageNewChinfo() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._setNewChinfo('setCurrentPageNewChinfo', params);
    }
    /**
     * 设置下一个页面的渠道
     * @param {*} params newChinfo + scm
     */

  }, {
    key: "setNextPageNewChinfo",
    value: function setNextPageNewChinfo() {
      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      this._setNewChinfo('setNextPageNewChinfo', params);
    } // 设置全引导参数基础方法

  }, {
    key: "_setParams",
    value: function _setParams(actionType, params, scmId) {
      if (!params) return;
      var pageParams = {};
      var extraParams = {};

      if (typeof params === 'string') {
        // 老接口格式设置chinfo与scm参数
        pageParams.chinfo = params || '';
        pageParams.scm = scmId || '';
      }

      if (_typeof(params) === 'object') {
        // 新接口同名，通过统一params设置
        var _params$newChinfo = params.newChinfo,
            newChinfo = _params$newChinfo === void 0 ? '' : _params$newChinfo,
            _params$chinfo = params.chinfo,
            chinfo = _params$chinfo === void 0 ? '' : _params$chinfo,
            _params$entityId = params.entityId,
            entityId = _params$entityId === void 0 ? '' : _params$entityId,
            _params$scm = params.scm,
            scm = _params$scm === void 0 ? '' : _params$scm,
            _params$tracestep = params.tracestep,
            tracestep = _params$tracestep === void 0 ? 3 : _params$tracestep,
            isforce = params.isforce;
        if (newChinfo) pageParams.newChinfo = newChinfo; // 流量位名称

        if (chinfo) pageParams.chinfo = chinfo; // 渠道名称

        pageParams.scm = entityId || scm || ''; // 投放内容

        extraParams.tracestep = tracestep; // 透传步数，缺省为3

        if (isforce) extraParams.isforce = '1';
      }

      this.callBridge('handleLoggingAction', _objectSpread2({
        actionType: actionType,
        data: JSON.stringify(pageParams)
      }, extraParams));
    } // 通用设置渠道链参数的方法

  }, {
    key: "_setChinfoChain",
    value: function _setChinfoChain(actionType) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var data = {};
      var newChinfo = params.newChinfo || '';
      var chInfo = params.chInfo || params.chinfo || '';
      var scm = params.entityId || params.scm || '';
      if (newChinfo) data.newChinfo = newChinfo;
      if (chInfo) data.chinfo = chInfo;
      if (scm) data.scm = scm;
      this.callBridge('handleLoggingAction', {
        actionType: actionType,
        data: JSON.stringify(data),
        type: params.type || 'click'
      });
    } // 通用设置页面渠道的方法

  }, {
    key: "_setNewChinfo",
    value: function _setNewChinfo(actionType) {
      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var pageParams = {};
      var _params$newChinfo2 = params.newChinfo,
          newChinfo = _params$newChinfo2 === void 0 ? '' : _params$newChinfo2,
          _params$scm2 = params.scm,
          scm = _params$scm2 === void 0 ? '' : _params$scm2;

      if (newChinfo) {
        pageParams.newChinfo = newChinfo; // 流量位名称

        if (scm) pageParams.scm = scm; // 投放内容

        this.callBridge('handleLoggingAction', {
          actionType: actionType,
          params: pageParams
        });
      }
    }
  }]);

  return Ta;
}();

module.exports = Ta;
