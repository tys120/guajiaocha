function emptyCb() {}

function respHandler(result, cb, isStr) {
  const callback = typeof cb === 'function' ? cb : emptyCb;
  if (result && result.status === 'success') {
    if (result.data) {
      if (isStr) {
        callback(result.data);
      } else {
        try {
          const data = JSON.parse(result.data);
          callback(data);
        } catch (e) {
          callback({ err: '解析失败', response: result.data });
        }
      }
    } else callback({ err: '容器返回空' });
  } else callback({ err: '容器异常' });
}

class Ta {
  constructor(opt = {}) {
    const props = {
      spmAPos: '',
      spmBPos: '',
      callBridge: (...args) => {
        my.call(...args);
      }, // 调用jsbridge的方法
      bizType: 'common', // 业务类型
      logLevel: 2, // 默认是2
      chInfo: '', // 渠道
      scm: '', // 投放信息
      url: '', // url
      mdata: { // 通用的数据，可不传，传了所有的埋点均会带该额外参数
      },
      ready: false,
      debug: false,
      apiCashList: [], // 未准备好时候的缓存数组
      trace: false, // 是否开启全引导
      isTraced: false, // 是否执行过全引导参数透传
    };
    if (!opt.spmAPos && !opt.spmBPos) {
      throw new Error('实例化Tracert失败，SPM缺失');
    }
    Object.assign(this, props, opt);
    this.init();
  }

  getValueOfUrl(name, url) {
    let result = '';
    try {
      const pattern = new RegExp(`(?=\\?|\\&|\\b|^)${name}\\=(.+?)(?=\\&|$)`);
      result = pattern.exec(url);
      result = result ? `${result[1]}` : '';
      result = decodeURIComponent(result);
    } catch (e) {
      if (console) {
        console.warn('解析启动参数中的URL失败');
      }
    }
    return result;
  }

  /**
   * 初始化
   */
  init() {
    const { apiCashList, chInfo: originChinfo, getValueOfUrl } = this;

    // 获取启动参数
    this.callBridge('getStartupParams', result => {
      // 获取需要的启动参数
      const chInfo = result.chInfo || result.chinfo || getValueOfUrl('chInfo', result.url) || getValueOfUrl('chinfo', result.url) || '';
      const scm = result.scm || getValueOfUrl('scm', result.url) || '';
      const trace = !!(result.trace || getValueOfUrl('trace', result.url) || '');

      // 存储需要的参数, 同时将Tracert置为可以运行的状态
      this.set({
        chInfo: originChinfo || chInfo, // 若手动设置则优先使用
        scm,
        trace,
        ready: true
      });

      // 执行缓存的方法
      for (let i = 0; i < apiCashList.length; i++) {
        const [fn, ...args] = [].slice.call(apiCashList[i]);
        this.call(fn, ...args);
      }
    });
  }

  /**
   * 获取Tracert的属性或者方法
   * @param {String} key
   */
  get(key) {
    return this[key];
  }

  /**
   * 配置Tracert的属性或者方法
   * @param {Object} options
   */
  set(opt = {}) {
    const options = opt;
    // mdata 为特殊参数 制作合并不做替换
    if (typeof options.mdata === 'object') {
      options.mdata = {
        ...this.mdata,
        ...options.mdata,
      };
    }
    Object.assign(this, opt);
  }

  /**
   * 配置Tracert的属性并开始运行
   * @param {Object} options
   */
  start(opt = {}) {
    this.set(opt);

    // 判断logpv
    if (this.autoLogPv) {
      this.call('logPv');
    }
  }

  /**
   * 最终的发送方法
   * @param {String} fn 方法名称
   * @param {Function} callback 方法入参, 这里写成方法是为了获取到的参数永远是最新的
   */
  send(fn, callback) {
    const { debug } = this;
    const options = callback.call(this);

    if (debug && console) {
      console.log(fn, options);
    }
    this.callBridge(fn, options);

    // 若为页面埋点，初始化全引导
    if (fn === 'reportData') {
      this.call('checkFullLinkParams');
    }
  }

  /**
   * 通用唤起方法, 可以唤起Tracert所有方法，用于管理生命周期
   */
  call() {
    const args = [].slice.call(arguments);
    let result;
    if (this.ready) {
      if (!this[args[0]] || typeof this[args[0]] !== 'function') {
        console.warn(`未找到方法：${args[0]}`);
        return null;
      }
      const options = args.slice(1);
      result = this[args[0]].apply(this, options);
    } else {
      // 页面没加载完成，缓存
      this.apiCashList.push(args);
    }
    return result;
  }

  /**
   * 发送页面埋点
   * @param {Object} options
   */
  logPv(options = {}) {
    // 3. 发送埋点
    this.call('send', 'reportData', () => {
      // 获取需要的属性
      const { spmAPos, spmBPos, bizType, url, mdata, chInfo } = this;
      // 0. 判断是否首次调用，需要重置pageMonitor生命周期

      // 2. 拼装参数
      const obj = {
        spm: {
          url,
          bizType,
          isSPM: true,
          spmId: `${spmAPos}.${spmBPos}`,
        },
        spmDetail: {
          chInfo,
          ...mdata,
          ...options,
        },
      };

      return obj;
    });
  }

  // 补全spmId，比如 c.d 补全为a.b.c.d
  _fillspm(spmId = '') {
    const spmArr = spmId.split('.');
    if (spmArr.length > 2) {
      return spmId;
    }
    return `${this.spmAPos}.${this.spmBPos}.${spmId}`;
  }

  /**
   * 发送点击埋点
   * @param {String} spmId
   * @param {Object} options
   * @param {Object} extraParams 扩展属性5
   */
  click(spmId, options = {}, extraParams) {
    this.call('send', 'remoteLog', () => {
      const { chInfo, bizType, logLevel, url, mdata } = this;
      const obj = {
        type: 'monitor',
        bizType,
        logLevel,
        param1: url,
        param4: {
          chInfo,
          ...mdata,
          ...options,
        },
        actionId: 'clicked',
        spmId: this._fillspm(spmId),
      };
      if (extraParams && typeof extraParams === 'object' && extraParams.param5) {
        obj.param5 = extraParams.param5;
      }
      return obj;
    });
  }

  /**
   * 发送曝光埋点
   * @param {String} spmId
   * @param {Object} options
   * @param {Object} extraParams 扩展属性5
   */
  expo(spmId, options = {}, extraParams) {
    this.call('send', 'remoteLog', () => {
      const { chInfo, bizType, logLevel, url, mdata } = this;
      const obj = {
        type: 'monitor',
        bizType,
        logLevel,
        param1: url,
        param4: {
          chInfo,
          ...mdata,
          ...options,
        },
        actionId: 'exposure',
        spmId: this._fillspm(spmId),
      };
      if (extraParams && typeof extraParams === 'object' && extraParams.param5) {
        obj.param5 = extraParams.param5;
      }
      return obj;
    });
  }

  /**
   * 全引导初始化
   */
  checkFullLinkParams() {
    const { trace, isTraced, chInfo: chinfo, scm } = this;
    if (trace && !isTraced) {
      this.callBridge('handleLoggingAction', {
        actionType: 'setPageParams',
        data: JSON.stringify({ chinfo, scm }),
      }, () => {
        this.set({ isTraced: true });
      });
    }
  }

  /**
   * 内容曝光接口
   * @param {String} spmId spmId
   * @param {String} scm   scm内容参数
   * @param {Object} newChinfo 流量位标识
   * @param {Object} params 系统参数（扩展4）
   */
  expoContent(spmId = '', scm = '', newChinfo = '', params = {}) {
    this.expo(spmId, params, { param5: `newChinfo=${newChinfo}^scm=${scm}` });
  }

  /**
   * 内容点击接口
   * @param {String} spmId spmId
   * @param {String} scm   scm内容参数
   * @param {Object} newChinfo 流量位标识
   * @param {Object} params 系统参数（扩展4）
   */
  clickContent(spmId = '', scm = '', newChinfo = '', params = {}) {
    this.click(spmId, params, { param5: `newChinfo=${newChinfo}^scm=${scm}` });
  }

  /**
   * 全引导能力，设置当前页面的透传参数
   * @param {*} params 透传参数
   * @param {*} scm 内容参数（兼容老接口）
   */
  setPageParams(params, scm) {
    this._setParams('setPageParams', params, scm);
  }

  /**
   * 全引导能力，设置下一个页面的透传参数
   * @param {*} params 透传参数
   */
  setNextPageParams(params) {
    this._setParams('setNextPageParams', params);
  }

  /**
   * 全渠道能力，缓存当前渠道信息
   * @param {*} params
   */
  appendChinfo(params = {}) {
    this._setChinfoChain('appendChinfo', params);
  }

  /**
   * 全渠道能力，更新当前渠道信息
   * @param {*} params
   */
  updateChinfo(params = {}) {
    this._setChinfoChain('updateChinfo', params);
  }

  /**
   * 获取渠道信息
   * @param {*} cb 回调
   * @param {*} options boolean 老接口，代表是否去重
   *                    object  新接口，配置项：isFiltered: boolean，是否去重
   *                                         isFirst: boolean, 是否只取第一个
   */
  getChinfoChain(cb, options = false) {
    let actionType = 'getChinfoChain';
    const params = {};
    if (typeof options === 'boolean' && options) {
      params.isFiltered = '1';
    }
    if (typeof options === 'object') {
      if (options.isFirst) actionType = 'getFirstChinfo';
      else if (options.isFiltered) params.isFiltered = '1';
    }
    this.callBridge('handleLoggingAction', {
      actionType,
      ...params,
    }, result => {
      respHandler(result, cb);
    });
  }

  /**
   * 获取渠道链UUID，并生成一条事件埋点上报渠道
   * @param {*} cb 回调
   * @param {*} options object 新接口，配置项：isFiltered: boolean，是否去重
   */
  getChinfoChainUUID(cb, options = {}) {
    const params = { actionType: 'getChinfoChainUUID' };
    if (options.isFiltered) params.isFiltered = '1';
    if (options.bizName) params.bizName = options.bizName;
    this.callBridge('handleLoggingAction', params, result => {
      respHandler(result, cb, true);
    });
  }

  /**
   * 获取当前页面的全引导参数（newChinfo + scm）
   * @param {*} cb 回调
   */
  getCurrentPageParams(cb) {
    this.callBridge('handleLoggingAction', {
      actionType: 'getCurrentPageParams',
    }, result => {
      respHandler(result, cb);
    });
  }

  /**
   * 设置当前页面的渠道
   * @param {*} params newChinfo + scm
   */
  setCurrentPageNewChinfo(params = {}) {
    this._setNewChinfo('setCurrentPageNewChinfo', params);
  }

  /**
   * 设置下一个页面的渠道
   * @param {*} params newChinfo + scm
   */
  setNextPageNewChinfo(params = {}) {
    this._setNewChinfo('setNextPageNewChinfo', params);
  }

  // 设置全引导参数基础方法
  _setParams(actionType, params, scmId) {
    if (!params) return;
    const pageParams = {};
    const extraParams = {};
    if (typeof params === 'string') { // 老接口格式设置chinfo与scm参数
      pageParams.chinfo = params || '';
      pageParams.scm = scmId || '';
    }
    if (typeof params === 'object') { // 新接口同名，通过统一params设置
      const { newChinfo = '', chinfo = '', entityId = '', scm = '', tracestep = 3, isforce } = params;
      if (newChinfo) pageParams.newChinfo = newChinfo; // 流量位名称
      if (chinfo) pageParams.chinfo = chinfo; // 渠道名称
      pageParams.scm = entityId || scm || ''; // 投放内容
      extraParams.tracestep = tracestep; // 透传步数，缺省为3
      if (isforce) extraParams.isforce = '1';
    }
    this.callBridge('handleLoggingAction', {
      actionType,
      data: JSON.stringify(pageParams),
      ...extraParams,
    });
  }

  // 通用设置渠道链参数的方法
  _setChinfoChain(actionType, params = {}) {
    const data = {};
    const newChinfo = params.newChinfo || '';
    const chInfo = params.chInfo || params.chinfo || '';
    const scm = params.entityId || params.scm || '';
    if (newChinfo) data.newChinfo = newChinfo;
    if (chInfo) data.chinfo = chInfo;
    if (scm) data.scm = scm;
    this.callBridge('handleLoggingAction', {
      actionType,
      data: JSON.stringify(data),
      type: params.type || 'click',
    });
  }

  // 通用设置页面渠道的方法
  _setNewChinfo(actionType, params = {}) {
    const pageParams = {};
    const { newChinfo = '', scm = '' } = params;
    if (newChinfo) {
      pageParams.newChinfo = newChinfo; // 流量位名称
      if (scm) pageParams.scm = scm; // 投放内容
      this.callBridge('handleLoggingAction', {
        actionType,
        params: pageParams,
      });
    }
  }
}

module.exports = Ta;
